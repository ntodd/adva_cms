LaterDude
=========

LaterDude is a small calendar helper plugin for Rails with i18n support.

It was heavily inspired by "Jeremy Voorhis'/Geoffrey Grosenbach's calendar_helper plugin":http://topfunky.net/svn/plugins/calendar_helper/. Here's what's different:

  * LaterDude leverages the power of the "Rails i18n plugin":http://rails-i18n.org. This means that if you have Rails 2.2 or higher (or if you've installed the i18n gem and the plugin separately), you can just drop in locales and you'll get localized month and day names.
  * Where the calendar_helper had one helper method that internally called multiple other private methods, LaterDude keeps the namespace clean by tucking away all of its functionality in a presenter (of sorts).
  * Most CSS class names are given implictly, e.g. "day", "weekendDay" (both are given to the displayed month as well as to the previous and following month), "otherMonth" (all days that don't belong to the displayed month) and "today". The only CSS class that can be configured is the table's class (which defaults to "calendar"). Further customization can be taken care of by passing a block (see examples).


Examples
========

There are two basic ways of outputting a calendar: via the presenter itself or by using the helper method:

  <%= calendar_for(2009, 1) %> and
  <%= LaterDude::Calendar.new(2009, 1).to_html %>
  
both yield the same results. This is similar to what Rails does with RedCloth/BlueCloth filters.

In addition to year and month which are required parameters you can optionally supply an options hash:

  <%= calendar_for(2009, 1, :calendar_class => "my_calendar", :first_day_of_week => 1)
  
Possible options are:

  * :calendar_class: The CSS class for the surrounding table. Defaults to "calendar".
  * :first_day_of_week: The first day of the week (0 = Sunday, 1 = Monday etc.). Defaults to the :'date.first_day_of_week' translation in the respective locale or 0 if no translation can be found.
  * :hide_day_names: Hide the table header showing day names. Defaults to false.
  * :hide_month_name: Hide the table header showing the month name. Defaults to false.
  * :use_full_day_names: Use full instead of abbreviated day names. Defaults to false.
  * :use_full_month_names: Use full instead of abbreviated month names. Defaults to true.
  * :header_date_format: Use the given date format to customize how the month name is shown in the table header. This uses I18n.localize internally, so you can either pass a strftime-compatible string which is then interpolated (e.g. "%b %y" to show the abbreviated month and two-digit year) or a symbol which will be looked up in the locale (e.g. :long will look for :'date.formats.long'). Defaults to the :'date.formats.calendar_header' translation in the respective locale or "%B %Y" (e.g. "January 2009") if no translation can be found.

You can also pass in a block to mark days according to your own set of rules. The block gets passed each day of the current month (i.e. days of the previous and following month are *not* yielded):

  <%= calendar_for(2009, 1) do |day|
    if Calendar.has_events_on?(day)
      [link_to events_path(day.year, day.month, day.day), { :class => "dayWithEvents" }]
    else
      day.day
    end
  end %>

The block can either return an array containing two elements or a single value. If an array is returned, the first element will be the content of the table cell and the second will be used as HTML options for the table cell tag. If a single value is returned, it will be used as the content of the table cell.

Hint: You can avoid cluttering up your views and move the block to a helper:

  # app/helpers/calendar_helper.rb
  def calendar_events_proc
    lambda do |day|
      if Calendar.has_events_on?(day)
        [link_to events_path(day.year, day.month, day.day), { :class => "dayWithEvents" }]
      else
        day.day
      end
    end
  end

  # app/views/calendar/show.html
  <%= calendar_for(2009, 1, &calendar_events_proc)

i18n
====

You can define the following keys in your locale files to customize output:

  * date.formats.calendar_header: Defines the date format to be used for the table header.
  * date.first_day_of_week: Defines the first day of a week (0 = Sunday, 1 = Monday etc.).

Of course, you can also put other configuration options in the locale and then pass them in manually:

  # somewhere in a locale
  date:
    calendar:
      calendar_class: my_cool_calendar
      
  # in the view
  <%= calendar_for(2009, 1, :calendar_class => I18n.translate(:'date.calendar.calendar_class', :default => "my_calendar"))

Note that you should always pass in a default in case a translation can't be found since your options override the default options which might result in weird exceptions if the translation is missing.

Next steps
==========

There are a few things that are missing in this release and will probably be added over the next few days:

  * At the moment, there are no possibilities to just flip through months like in most calendars. I'm undecided if this belongs in this plugins or should just be done by the user.

Bugs & Feedback
===============

You can send me feedback, bug reports and patches via "GitHub":http://github.com/clemens.

Copyright (c) 2009 Clemens Kofler <clemens@railway.at>, released under the MIT license.
